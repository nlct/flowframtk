// File          : JDRGuiMessage.java
// Purpose       : GUI message system
// Creation Date : 12th June 2008
// Author        : Nicola L.C. Talbot
//               http://www.dickimaw-books.com/

/*
    Copyright (C) 2006 Nicola L.C. Talbot

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package com.dickimawbooks.jdrresources;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

import com.dickimawbooks.jdr.io.*;

/**
 * GUI message system. .
 * @author Nicola L C Talbot
 */

public class JDRGuiMessage extends Thread implements JDRMessage,ActionListener
{
   public JDRGuiMessage()
   {
      messageDialog = new JFrame(
         JDRResources.getString("message.title", "Messages"));

      messageDialog.addWindowListener(new WindowAdapter()
      {
         public void windowClosing(WindowEvent evt)
         {
            state = IDLE;
            warningFlag = false;
         }
      });

      messageArea = new JTextArea();
      messageArea.setText("");
      messageArea.setEditable(false);
      messageArea.setBackground(Color.white);

      messageScrollPane = new JScrollPane(messageArea);


      messageDialog.getContentPane().add(messageScrollPane, "Center");

      progressBar = new JProgressBar();

      messageDialog.getContentPane().add(progressBar, "North");

      JPanel buttonPanel = new JPanel(new BorderLayout());
      messageDialog.getContentPane().add(buttonPanel, "South");

      processInfo = new JLabel();
      buttonPanel.add(processInfo, "Center");

      abortButton = new JButton(
         JDRResources.getString("label.abort", "Abort"));
      abortButton.addActionListener(this);
      abortButton.setActionCommand("abort");
      buttonPanel.add(abortButton, "East");

      enableAbort(false);

      buttonPanel.add(JDRResources.createCloseButton(this), "South");

      messageArea.getInputMap(JComponent.WHEN_FOCUSED)
         .put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),
              "close");

      int width = 400;
      int height = 200;

      messageDialog.setSize(width,height);

      Toolkit tk = Toolkit.getDefaultToolkit();
      Dimension d = tk.getScreenSize();
      int screenHeight = d.height;
      int screenWidth  = d.width;

      int x = (screenWidth-width)/2;
      int y = (screenHeight-height)/2;

      messageDialog.setLocation(x, y);

      state = IDLE;

      start();
   }

   public void run()
   {
      try
      {
         while (true)
         {
            sleep(100);

            switch (state)
            {
               case SHOW : doShow(); break;
               case HIDE : doHide(); break;
            }
         }
      }
      catch (InterruptedException e)
      {
      }
   }

   private synchronized void doShow()
   {
      messageDialog.setVisible(true);
      messageDialog.toFront();
      messageDialog.requestFocus();
      state = IDLE;
      debug("Message dialog shown");
   }

   private synchronized void doHide()
   {
      messageDialog.setVisible(false);
      warningFlag = false;
      state = IDLE;
      debug("Message dialog hidden");
   }

   public void actionPerformed(ActionEvent evt)
   {
      String action = evt.getActionCommand();

      if (action == null) return;

      if (action.equals("close"))
      {
         state = HIDE;
      }
   }

   /**
    * Displays message dialogue.
    */
   public synchronized void displayMessages()
   {
      state = SHOW;
   }

   /**
    * Hides message dialogue.
    */
   public synchronized void hideMessages()
   {
      state = HIDE;
   }

   public synchronized void setIndeterminate(boolean indeterminate)
   {
      progressBar.setIndeterminate(indeterminate);
   }

   public synchronized boolean isIndeterminate()
   {
      return progressBar.isIndeterminate();
   }

   public synchronized void incrementProgress()
   {
      setProgress(progressBar.getValue()+1);
   }

   public synchronized void setMaxProgress(int maxValue)
   {
      progressBar.setMaximum(maxValue);
   }

   public int getMaxProgress()
   {
      return progressBar.getMaximum();
   }

   public synchronized void resetProgress(int maxValue)
   {
      progressBar.setValue(0);
      progressBar.setMaximum(maxValue);
   }

   public synchronized void resetProgress()
   {
      progressBar.setValue(0);
   }

   public synchronized int getProgress()
   {
      return progressBar.getValue();
   }

   public synchronized void setProgress(int value)
   {
      progressBar.setValue(value);
   }

   public synchronized void message(String messageText)
   {
      messageArea.append(messageText);
   }

   public synchronized void message(Exception excp)
   {
      messageArea.append(excp.getMessage());
   }

   public synchronized void messageln(String messageText)
   {
      messageArea.append(messageText+"\n");
   }

   public synchronized void messageln(Exception excp)
   {
      messageArea.append(excp.getMessage()+"\n");
   }

   public synchronized void warning(String messageText)
   {
      messageln(JDRResources.getStringWithValue(
        "warning.tag", messageText));
      warningFlag = true;
      displayMessages();
   }

   public synchronized void warning(Exception excp)
   {
      warning(excp.getMessage());
   }

   public void error(String messageText)
   {
      JDRResources.error(null, messageText);
      messageln(messageText);
   }

   public void error(Exception excp)
   {
      JDRResources.error(null, excp);
      messageln(excp.getMessage());
   }

   public void internalerror(String messageText)
   {
      JDRResources.internalError(null, messageText);
      messageln(messageText);
   }

   public void internalerror(Exception excp)
   {
      JDRResources.internalError(null, excp);
      messageln(excp.getMessage());
   }

   public void fatalerror(String messageText)
   {
      JDRResources.error(null, messageText);
      System.exit(0);
   }

   public void fatalerror(Exception excp)
   {
      JDRResources.fatalError(excp.getMessage(), excp);
   }

   public String getString(String tag, String alt)
   {
      return JDRResources.getString(tag, alt);
   }

   public String getStringWithValues(String tag,
     String[] values, String alt)
   {
      return JDRResources.getStringWithValue(tag, values, alt);
   }

   public synchronized boolean warningFlagged()
   {
      return warningFlag;
   }

   public synchronized void enableAbort(boolean enabled)
   {
      abortButton.setEnabled(enabled);
      processInfo.setEnabled(enabled);
      processInfo.setText("");
   }

   public synchronized void setProcessInfo(String text)
   {
      processInfo.setText(text);
   }

   public void debug(Exception e)
   {
      JDRResources.debugMessage(e);
   }

   public void debug(String msg)
   {
      JDRResources.debugMessage(msg);
   }

   private JProgressBar progressBar;

   private JFrame messageDialog;
   private JTextArea messageArea;
   private JScrollPane messageScrollPane;

   private JLabel processInfo;
   private JButton abortButton;

   private volatile boolean warningFlag = false;

   private volatile int state;

   private static final int IDLE = 0;
   private static final int SHOW = 1;
   private static final int HIDE = 2;
}
